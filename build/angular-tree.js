// Generated by CoffeeScript 1.3.3
(function() {
  var array_insert;

  array_insert = function(array, item, newItems, pos) {
    var idx;
    if (array.length > 0) {
      idx = array.indexOf(item);
      if (idx !== -1) {
        return array.concat(newItems, array.splice(idx + (pos === 'right' ? 1 : 0)));
      } else {
        return array;
      }
    } else {
      return newItems;
    }
  };

  angular.module('$angularTree.config', []).value('$angularTree.config', {});

  angular.module('$angularTree.filters', ['$angularTree.config']);

  angular.module('$angularTree.directives', ['$angularTree.config']);

  angular.module('$angularTree', ['$angularTree.filters', '$angularTree.directives', '$angularTree.config']);

  angular.module('$angularTree.directives').directive('angularTree', function() {
    return {
      template: '<div>\n<div angular-tree-node ng-repeat="node in nodes"\n	data-node="node" data-options="options"></div></div>',
      replace: true,
      scope: {
        options: '=options'
      },
      link: function(scope, element, attrs) {
        var getChildren;
        scope.nodes = [];
        getChildren = function(node) {
          if (scope.options.getChildren) {
            return scope.options.getChildren(node, function(data) {
              var item, _i, _len;
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                item = data[_i];
                item.level = node ? node.level + 1 : 0;
                item.parent = node;
              }
              scope.nodes = array_insert(scope.nodes, node, data, 'right');
              if (node) {
                node.loaded = true;
                return node.expanded = true;
              }
            });
          }
        };
        scope.onExpanderClick = function(node) {
          if (!node.level) {
            node.level = 0;
          }
          if (!node.loaded) {
            getChildren(node);
          } else {
            node.expanded = !node.expanded;
          }
          return true;
        };
        scope.onLabelClick = function(node) {
          var item, _i, _len, _ref;
          if (node.selected) {
            return false;
          } else {
            _ref = scope.nodes;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              item.selected = false;
            }
            return node.selected = true;
          }
        };
        return getChildren();
      }
    };
  });

  angular.module('$angularTree.directives').directive('angularTreeNode', function() {
    return {
      template: '<div class="angular-tree-node" ng-show="node.visible" ng-class="nodeClass">\n	<i ng-style="{marginLeft: node.level + \'em\'}"></i>\n	<i ng-class="expanderClass" class="angular-tree-icon-collapsed angular-tree-node-expander" ng-click="onExpanderClick(node) && options.onExpanderClick(node)"></i>\n	<span class="angular-tree-node-label" ng-click="onLabelClick(node) && options.onLabelClick(node);">{{node.label}}</span>\n</div>',
      replace: true,
      link: function(scope, element, attrs) {
        scope.$watch('node.parent.expanded', function(expanded) {
          if (scope.node.parent) {
            return scope.node.visible = expanded;
          } else {
            return scope.node.visible = true;
          }
        });
        scope.$watch('node.parent.visible', function(visible) {
          if (scope.node.parent) {
            return scope.node.visible = visible;
          } else {
            return scope.node.visible = true;
          }
        });
        scope.$watch('node.expanded', function(v) {
          return scope.expanderClass = v ? scope.options.expandedIconClass || 'angular-tree-icon-expanded' : scope.options.collapsedIconClass || 'angular-tree-icon-collapsed';
        });
        return scope.$watch('node.selected', function(v) {
          return scope.nodeClass = v ? 'selected' : '';
        });
      }
    };
  });

}).call(this);
